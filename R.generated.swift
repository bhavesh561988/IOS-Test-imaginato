//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_clock`.
    static let ic_clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clock")
    /// Image `ic_diary`.
    static let ic_diary = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diary")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_clock", bundle: ..., traitCollection: ...)`
    static func ic_clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diary", bundle: ..., traitCollection: ...)`
    static func ic_diary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diary, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `MyDiaryCell`.
    static let myDiaryCell = _R.nib._MyDiaryCell()
    /// Nib `MyDiaryHeader`.
    static let myDiaryHeader = _R.nib._MyDiaryHeader()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyDiaryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myDiaryCell) instead")
    static func myDiaryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myDiaryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyDiaryHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myDiaryHeader) instead")
    static func myDiaryHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myDiaryHeader)
    }
    #endif

    static func myDiaryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyDiaryCell? {
      return R.nib.myDiaryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyDiaryCell
    }

    static func myDiaryHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyDiaryHeader? {
      return R.nib.myDiaryHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyDiaryHeader
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// Value: Please enter content
      static let content_empty = Rswift.StringResource(key: "content_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter title
      static let title_empty = Rswift.StringResource(key: "title_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Someting went wrong, Please try after some time.
      static let somenthing_wrong_error_message = Rswift.StringResource(key: "Somenthing_wrong_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unable to contact the server
      static let internet_error = Rswift.StringResource(key: "Internet_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Please enter content
      static func content_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("content_empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "content_empty"
        }

        return NSLocalizedString("content_empty", bundle: bundle, comment: "")
      }

      /// Value: Please enter title
      static func title_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_empty"
        }

        return NSLocalizedString("title_empty", bundle: bundle, comment: "")
      }

      /// Value: Someting went wrong, Please try after some time.
      static func somenthing_wrong_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Somenthing_wrong_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Somenthing_wrong_error_message"
        }

        return NSLocalizedString("Somenthing_wrong_error_message", bundle: bundle, comment: "")
      }

      /// Value: Unable to contact the server
      static func internet_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Internet_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Internet_error"
        }

        return NSLocalizedString("Internet_error", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MyDiaryCell.validate()
      try _MyDiaryHeader.validate()
    }

    struct _MyDiaryCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyDiaryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyDiaryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyDiaryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_diary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diary' is used in nib 'MyDiaryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MyDiaryHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyDiaryHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyDiaryHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyDiaryHeader
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_clock' is used in nib 'MyDiaryHeader', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let editDiaryViewController = StoryboardViewControllerResource<EditDiaryViewController>(identifier: "EditDiaryViewController")
      let myDiaryViewController = StoryboardViewControllerResource<MyDiaryViewController>(identifier: "MyDiaryViewController")
      let name = "Main"

      func editDiaryViewController(_: Void = ()) -> EditDiaryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editDiaryViewController)
      }

      func myDiaryViewController(_: Void = ()) -> MyDiaryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myDiaryViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().editDiaryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editDiaryViewController' could not be loaded from storyboard 'Main' as 'EditDiaryViewController'.") }
        if _R.storyboard.main().myDiaryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myDiaryViewController' could not be loaded from storyboard 'Main' as 'MyDiaryViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
